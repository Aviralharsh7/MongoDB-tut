1. Intro
- indexes are special data structures used for improving performance during range based queries, equality matches. 
- indexes have effect on write performance as they are also updated when we update or create documents. 
- types are: 
  - single field: when index are on sinlge field in a document. can also multi key if that single field is an array. 
  - compound: one index for multiple fields in a document. here order of field determines when they are sorted. note that multikey + compound field will have only array field and rest are scalar. 
  - multikey indexes: each element of array get an index. 

2. Single field index
- syntax: db.customers.createIndex({email:1}, {unique:true});         // unique single field index
          - unique:true will make it throw an error when a duplicate email is inserted. 
          - note how email field is sorted. 
- db.customers.getIndexes() : returns a list of all indexes we have created. (including the default _id index) 
- explain(): 
  - it returns the execution plan of a query. 
  - The IXSCAN stage indicates the query is using an index and what index is being selected.
  - The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
  - The FETCH stage indicates documents are being read from the collection.
  - The SORT stage indicates documents are being sorted in memory.

3. Compound Index
- Order of fields: equality > sort > range (like ISODate) 
- same createIndex(), getIndexes(), explain() uses. 

4. Cover query using Indexes
- this is done using projections.
- ensure that index has all fields which are in projection.

5. Delete Index
- dropIndex(<index name or index key>): for single del
- dropIndexes([<index name or index key>]): for multi del         // accepts array of index names
- hideIndex(<index name or index key>) : hide the index

- deleting indexes usually comes at a performance costs and can fuck up things, so it is recommended to hide them to check its impact (over deleting and recreating it)
- _id index can not be deleted.
