1. What can we do with MongoDB atlas? 
- acts as a platform where you store data.
- embed search functionality into our database.
- host a full application. 
- send queries across multiple clusters and transform or move data across them.

2. MongoDB Atlas Clusters 
- Cluster is a group of servers that are connected via a network. 
- Cluster holds mutiple copies of our data. 
- Servers are allocated based on geographic location, load balancing, traffic patterns, and user proximity. 

3. Deploying at Atlas Cluster
- After adding sample data, the data size is 0.0B

4. MongoDB database
- MongoDB is based on document model. 
- Document model is more flexible compared to Table model. 
- MongoDB can have data of various types like, Time series, graph data, real-time analytics, etc. 

- Document is basic unit of Data here. 
- Grouping of documents is called collections.
- One or more collections form a database.
// org > project > cluster

- MongoDB database is the foundation of Atlas, which in turn evolves into a platform, offering additional functionalities (search, data visualization, mobile device sync, etc) 
// the additional functionalities are built on top of data stored in cloud-hosted MongoDB databases. 

5. MongoDB Document Model 
- MongoDB displays in JSON but stores in BSON.
- BSON supports a superset of datatypes supported by JSON and more (dates,numbers, objectId). 
- Example of few datatypes - 32bit integer, 64 bit integer, double, decimal128, object, array, objectId.

- ObjectId auto-generates a unique identifier for a "document" if it is missing _id field. 
- _id field is unique and compulsary for every document in MongoDB.

- Flexible schema model means that document in a same collection are not required to share a common structure of fields and value types by default. (polymorphic documents) 

6. Database, collection, docs in Atlas Data explorer
- trivial 

7. Connection Strings
- two ways to connect: 
  Standard format: connects to standalone clusters, sharded clusters or replica sets. 
  DNS seed list format: provides DNS server list (this enables us to rotate servers without reconfig our clients) 

- Its components are 
  [[ mongodb+srv:// ]] - this is syntax, srv automatically sets TLS to true and connects via DNS seed list format.
  [[ harshy2026:<password> ]] - created in atlas 
  [[ @cluster001.k41lvvj.mongodb.net/ ]] - host, port. default port is 27.0.17 
  [[ ?retryWrites=true&w=majority ]] - options. start w ?. 

8. Connecting Shell 
- MongoDB shell is a node.js REPL environment, thus giving access to JS variables, functions, control flow statements, etc inside the shell. 
- Generate connection string in Atlas cluster, ensure mongosh is installed, paste string in CLI to create REPL environmet. TADA.

9. Connecting mongoDB compass 
- replica of atlas data explorer only. 
- we can analyze data, makes queries on it, compose aggregation pipelines. 
// data lake does it bw clusters and amazon s3. 
// charts are for visualisation. 

10. Connecting application
- via mongodb drivers, we connect mongodb to our application with a programming language like js, python. 
- refer to driver docs for more. https://www.mongodb.com/docs/drivers/?_ga=2.113696199.1950502909.1693804538-1468199963.1692365586

11. Troubleshooting connection errors
- make sure IP address is given access (via atlas). 
- all components of connection string are correct like replace <password> 
- check if you are connecting to right database deployement incase of bad auth error
